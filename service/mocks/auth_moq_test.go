// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"boardfund/service/members"
	"context"
	"github.com/google/uuid"
	"sync"
)

// Ensure, that AuthProviderMock does implement members.AuthProvider.
// If this is not the case, regenerate this file with moq.
var _ members.AuthProvider = &AuthProviderMock{}

// AuthProviderMock is a mock implementation of members.AuthProvider.
//
//	func TestSomethingThatUsesAuthProvider(t *testing.T) {
//
//		// make and configure a mocked members.AuthProvider
//		mockedAuthProvider := &AuthProviderMock{
//			CreateUserFunc: func(ctx context.Context, username string, email string, memberID uuid.UUID) (string, error) {
//				panic("mock out the CreateUser method")
//			},
//			DeleteUserFunc: func(ctx context.Context, username string) error {
//				panic("mock out the DeleteUser method")
//			},
//		}
//
//		// use mockedAuthProvider in code that requires members.AuthProvider
//		// and then make assertions.
//
//	}
type AuthProviderMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, username string, email string, memberID uuid.UUID) (string, error)

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(ctx context.Context, username string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
			// Email is the email argument value.
			Email string
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
	}
	lockCreateUser sync.RWMutex
	lockDeleteUser sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *AuthProviderMock) CreateUser(ctx context.Context, username string, email string, memberID uuid.UUID) (string, error) {
	if mock.CreateUserFunc == nil {
		panic("AuthProviderMock.CreateUserFunc: method is nil but AuthProvider.CreateUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
		Email    string
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Username: username,
		Email:    email,
		MemberID: memberID,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, username, email, memberID)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedAuthProvider.CreateUserCalls())
func (mock *AuthProviderMock) CreateUserCalls() []struct {
	Ctx      context.Context
	Username string
	Email    string
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Username string
		Email    string
		MemberID uuid.UUID
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *AuthProviderMock) DeleteUser(ctx context.Context, username string) error {
	if mock.DeleteUserFunc == nil {
		panic("AuthProviderMock.DeleteUserFunc: method is nil but AuthProvider.DeleteUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(ctx, username)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedAuthProvider.DeleteUserCalls())
func (mock *AuthProviderMock) DeleteUserCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}
