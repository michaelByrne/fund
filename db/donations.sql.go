// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: donations.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/jackc/pgtype"
)

const getDonationById = `-- name: GetDonationById :one
SELECT id, donor_id, donation_plan_id, created, updated
FROM donation
WHERE id = $1
`

func (q *Queries) GetDonationById(ctx context.Context, id int32) (Donation, error) {
	row := q.db.QueryRow(ctx, getDonationById, id)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.DonorID,
		&i.DonationPlanID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getDonationPaymentById = `-- name: GetDonationPaymentById :one
SELECT id, donation_id, paypal_payment_id, amount_cents, created, updated
FROM donation_payment
WHERE id = $1
`

func (q *Queries) GetDonationPaymentById(ctx context.Context, id int32) (DonationPayment, error) {
	row := q.db.QueryRow(ctx, getDonationPaymentById, id)
	var i DonationPayment
	err := row.Scan(
		&i.ID,
		&i.DonationID,
		&i.PaypalPaymentID,
		&i.AmountCents,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getDonationPaymentsByDonationId = `-- name: GetDonationPaymentsByDonationId :many
SELECT id, donation_id, paypal_payment_id, amount_cents, created, updated
FROM donation_payment
WHERE donation_id = $1
`

func (q *Queries) GetDonationPaymentsByDonationId(ctx context.Context, donationID int32) ([]DonationPayment, error) {
	rows, err := q.db.Query(ctx, getDonationPaymentsByDonationId, donationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DonationPayment
	for rows.Next() {
		var i DonationPayment
		if err := rows.Scan(
			&i.ID,
			&i.DonationID,
			&i.PaypalPaymentID,
			&i.AmountCents,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDonationPaymentsByMemberPaypalEmail = `-- name: GetDonationPaymentsByMemberPaypalEmail :many
SELECT donation_payment.id, donation_payment.donation_id, donation_payment.paypal_payment_id, donation_payment.amount_cents, donation_payment.created, donation_payment.updated
FROM donation_payment
JOIN donation ON donation.id = donation_payment.donation_id
JOIN member ON member.id = donation.donor_id
WHERE member.paypal_email = $1
`

func (q *Queries) GetDonationPaymentsByMemberPaypalEmail(ctx context.Context, paypalEmail string) ([]DonationPayment, error) {
	rows, err := q.db.Query(ctx, getDonationPaymentsByMemberPaypalEmail, paypalEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DonationPayment
	for rows.Next() {
		var i DonationPayment
		if err := rows.Scan(
			&i.ID,
			&i.DonationID,
			&i.PaypalPaymentID,
			&i.AmountCents,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDonationPlanById = `-- name: GetDonationPlanById :one
SELECT id, name, paypal_plan_id, amount_cents, interval_unit, interval_count, active, created, updated
FROM donation_plan
WHERE id = $1
`

func (q *Queries) GetDonationPlanById(ctx context.Context, id int32) (DonationPlan, error) {
	row := q.db.QueryRow(ctx, getDonationPlanById, id)
	var i DonationPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PaypalPlanID,
		&i.AmountCents,
		&i.IntervalUnit,
		&i.IntervalCount,
		&i.Active,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getDonationPlans = `-- name: GetDonationPlans :many
SELECT id, name, paypal_plan_id, amount_cents, interval_unit, interval_count, active, created, updated
FROM donation_plan
ORDER BY created
`

func (q *Queries) GetDonationPlans(ctx context.Context) ([]DonationPlan, error) {
	rows, err := q.db.Query(ctx, getDonationPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DonationPlan
	for rows.Next() {
		var i DonationPlan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PaypalPlanID,
			&i.AmountCents,
			&i.IntervalUnit,
			&i.IntervalCount,
			&i.Active,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDonationsByDonorId = `-- name: GetDonationsByDonorId :many
SELECT id, donor_id, donation_plan_id, created, updated
FROM donation
WHERE donor_id = $1
`

func (q *Queries) GetDonationsByDonorId(ctx context.Context, donorID int32) ([]Donation, error) {
	rows, err := q.db.Query(ctx, getDonationsByDonorId, donorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Donation
	for rows.Next() {
		var i Donation
		if err := rows.Scan(
			&i.ID,
			&i.DonorID,
			&i.DonationPlanID,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDonationsByMemberPaypalEmail = `-- name: GetDonationsByMemberPaypalEmail :many
SELECT donation.id, donor_id, donation_plan_id, donation.created, donation.updated, member.id, first_name, last_name, bco_name, ip_address, paypal_email, postal_code, member.created, member.updated, provider_payer_id
FROM donation
JOIN member ON member.id = donation.donor_id
WHERE member.paypal_email = $1
`

type GetDonationsByMemberPaypalEmailRow struct {
	ID              int32
	DonorID         int32
	DonationPlanID  int32
	Created         time.Time
	Updated         time.Time
	ID_2            int32
	FirstName       sql.NullString
	LastName        sql.NullString
	BcoName         sql.NullString
	IpAddress       pgtype.Inet
	PaypalEmail     string
	PostalCode      sql.NullString
	Created_2       time.Time
	Updated_2       time.Time
	ProviderPayerID sql.NullString
}

func (q *Queries) GetDonationsByMemberPaypalEmail(ctx context.Context, paypalEmail string) ([]GetDonationsByMemberPaypalEmailRow, error) {
	rows, err := q.db.Query(ctx, getDonationsByMemberPaypalEmail, paypalEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDonationsByMemberPaypalEmailRow
	for rows.Next() {
		var i GetDonationsByMemberPaypalEmailRow
		if err := rows.Scan(
			&i.ID,
			&i.DonorID,
			&i.DonationPlanID,
			&i.Created,
			&i.Updated,
			&i.ID_2,
			&i.FirstName,
			&i.LastName,
			&i.BcoName,
			&i.IpAddress,
			&i.PaypalEmail,
			&i.PostalCode,
			&i.Created_2,
			&i.Updated_2,
			&i.ProviderPayerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDonation = `-- name: InsertDonation :one
INSERT INTO donation (donor_id, donation_plan_id)
VALUES ($1, $2)
RETURNING id, donor_id, donation_plan_id, created, updated
`

type InsertDonationParams struct {
	DonorID        int32
	DonationPlanID int32
}

func (q *Queries) InsertDonation(ctx context.Context, arg InsertDonationParams) (Donation, error) {
	row := q.db.QueryRow(ctx, insertDonation, arg.DonorID, arg.DonationPlanID)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.DonorID,
		&i.DonationPlanID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const insertDonationPayment = `-- name: InsertDonationPayment :one
INSERT INTO donation_payment (donation_id, paypal_payment_id, amount_cents)
VALUES ($1, $2, $3)
RETURNING id, donation_id, paypal_payment_id, amount_cents, created, updated
`

type InsertDonationPaymentParams struct {
	DonationID      int32
	PaypalPaymentID string
	AmountCents     int32
}

func (q *Queries) InsertDonationPayment(ctx context.Context, arg InsertDonationPaymentParams) (DonationPayment, error) {
	row := q.db.QueryRow(ctx, insertDonationPayment, arg.DonationID, arg.PaypalPaymentID, arg.AmountCents)
	var i DonationPayment
	err := row.Scan(
		&i.ID,
		&i.DonationID,
		&i.PaypalPaymentID,
		&i.AmountCents,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const insertDonationPlan = `-- name: InsertDonationPlan :one
INSERT INTO donation_plan (name, amount_cents, interval_unit, interval_count, active, paypal_plan_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, paypal_plan_id, amount_cents, interval_unit, interval_count, active, created, updated
`

type InsertDonationPlanParams struct {
	Name          string
	AmountCents   int32
	IntervalUnit  IntervalUnit
	IntervalCount int32
	Active        bool
	PaypalPlanID  sql.NullString
}

func (q *Queries) InsertDonationPlan(ctx context.Context, arg InsertDonationPlanParams) (DonationPlan, error) {
	row := q.db.QueryRow(ctx, insertDonationPlan,
		arg.Name,
		arg.AmountCents,
		arg.IntervalUnit,
		arg.IntervalCount,
		arg.Active,
		arg.PaypalPlanID,
	)
	var i DonationPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PaypalPlanID,
		&i.AmountCents,
		&i.IntervalUnit,
		&i.IntervalCount,
		&i.Active,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const updateDonation = `-- name: UpdateDonation :one
UPDATE donation
SET (donor_id, donation_plan_id) = ($2, $3)
WHERE id = $1
RETURNING id, donor_id, donation_plan_id, created, updated
`

type UpdateDonationParams struct {
	ID             int32
	DonorID        int32
	DonationPlanID int32
}

func (q *Queries) UpdateDonation(ctx context.Context, arg UpdateDonationParams) (Donation, error) {
	row := q.db.QueryRow(ctx, updateDonation, arg.ID, arg.DonorID, arg.DonationPlanID)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.DonorID,
		&i.DonationPlanID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const updateDonationPlan = `-- name: UpdateDonationPlan :one
UPDATE donation_plan
SET (name, amount_cents, interval_unit, interval_count, active, paypal_plan_id) = ($2, $3, $4, $5, $6, $7)
WHERE id = $1
RETURNING id, name, paypal_plan_id, amount_cents, interval_unit, interval_count, active, created, updated
`

type UpdateDonationPlanParams struct {
	ID            int32
	Name          string
	AmountCents   int32
	IntervalUnit  IntervalUnit
	IntervalCount int32
	Active        bool
	PaypalPlanID  sql.NullString
}

func (q *Queries) UpdateDonationPlan(ctx context.Context, arg UpdateDonationPlanParams) (DonationPlan, error) {
	row := q.db.QueryRow(ctx, updateDonationPlan,
		arg.ID,
		arg.Name,
		arg.AmountCents,
		arg.IntervalUnit,
		arg.IntervalCount,
		arg.Active,
		arg.PaypalPlanID,
	)
	var i DonationPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PaypalPlanID,
		&i.AmountCents,
		&i.IntervalUnit,
		&i.IntervalCount,
		&i.Active,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
