// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: finance.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getPaymentsForDonation = `-- name: GetPaymentsForDonation :many
SELECT dp.id, dp.donation_id, dp.paypal_payment_id, dp.amount_cents, dp.created, dp.updated
FROM donation_payment dp
WHERE dp.donation_id = $1
`

func (q *Queries) GetPaymentsForDonation(ctx context.Context, donationID uuid.UUID) ([]DonationPayment, error) {
	rows, err := q.db.Query(ctx, getPaymentsForDonation, donationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DonationPayment
	for rows.Next() {
		var i DonationPayment
		if err := rows.Scan(
			&i.ID,
			&i.DonationID,
			&i.PaypalPaymentID,
			&i.AmountCents,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecurringDonationsForFund = `-- name: GetRecurringDonationsForFund :many
SELECT d.id, d.recurring, d.donor_id, d.donation_plan_id, d.provider_order_id, d.created, d.updated, d.fund_id, d.active, d.provider_subscription_id, d.inactive_reason
FROM donation d
         JOIN fund f ON d.fund_id = f.id
WHERE d.active = $1
  AND d.recurring = true
  AND f.id = $2
`

type GetRecurringDonationsForFundParams struct {
	Active bool
	ID     uuid.UUID
}

func (q *Queries) GetRecurringDonationsForFund(ctx context.Context, arg GetRecurringDonationsForFundParams) ([]Donation, error) {
	rows, err := q.db.Query(ctx, getRecurringDonationsForFund, arg.Active, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Donation
	for rows.Next() {
		var i Donation
		if err := rows.Scan(
			&i.ID,
			&i.Recurring,
			&i.DonorID,
			&i.DonationPlanID,
			&i.ProviderOrderID,
			&i.Created,
			&i.Updated,
			&i.FundID,
			&i.Active,
			&i.ProviderSubscriptionID,
			&i.InactiveReason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
