// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: auth.sql

package db

import (
	"context"
)

const deleteApprovedEmail = `-- name: DeleteApprovedEmail :one
DELETE FROM approved_email
WHERE email = $1
RETURNING email, used, used_at, created, updated
`

func (q *Queries) DeleteApprovedEmail(ctx context.Context, email string) (ApprovedEmail, error) {
	row := q.db.QueryRow(ctx, deleteApprovedEmail, email)
	var i ApprovedEmail
	err := row.Scan(
		&i.Email,
		&i.Used,
		&i.UsedAt,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getApprovedEmail = `-- name: GetApprovedEmail :one
SELECT email, used, used_at, created, updated
FROM approved_email
WHERE email = $1
`

func (q *Queries) GetApprovedEmail(ctx context.Context, email string) (ApprovedEmail, error) {
	row := q.db.QueryRow(ctx, getApprovedEmail, email)
	var i ApprovedEmail
	err := row.Scan(
		&i.Email,
		&i.Used,
		&i.UsedAt,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getApprovedEmails = `-- name: GetApprovedEmails :many
SELECT email, used, used_at, created, updated
FROM approved_email
ORDER BY created
`

func (q *Queries) GetApprovedEmails(ctx context.Context) ([]ApprovedEmail, error) {
	rows, err := q.db.Query(ctx, getApprovedEmails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApprovedEmail
	for rows.Next() {
		var i ApprovedEmail
		if err := rows.Scan(
			&i.Email,
			&i.Used,
			&i.UsedAt,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPasskeyUser = `-- name: GetPasskeyUser :one
SELECT id, email, bco_name, creds, created, updated
FROM passkey_user
WHERE bco_name = $1
`

func (q *Queries) GetPasskeyUser(ctx context.Context, bcoName string) (PasskeyUser, error) {
	row := q.db.QueryRow(ctx, getPasskeyUser, bcoName)
	var i PasskeyUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.BcoName,
		&i.Creds,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getPasskeyUserById = `-- name: GetPasskeyUserById :one
SELECT id, email, bco_name, creds, created, updated
FROM passkey_user
WHERE id = $1
`

func (q *Queries) GetPasskeyUserById(ctx context.Context, id []byte) (PasskeyUser, error) {
	row := q.db.QueryRow(ctx, getPasskeyUserById, id)
	var i PasskeyUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.BcoName,
		&i.Creds,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const insertApprovedEmail = `-- name: InsertApprovedEmail :one
INSERT INTO approved_email (email)
VALUES ($1)
RETURNING email, used, used_at, created, updated
`

func (q *Queries) InsertApprovedEmail(ctx context.Context, email string) (ApprovedEmail, error) {
	row := q.db.QueryRow(ctx, insertApprovedEmail, email)
	var i ApprovedEmail
	err := row.Scan(
		&i.Email,
		&i.Used,
		&i.UsedAt,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const insertPasskeyUser = `-- name: InsertPasskeyUser :one
INSERT INTO passkey_user (id, bco_name, email, creds)
VALUES ($1, $2, $3, $4)
RETURNING id, email, bco_name, creds, created, updated
`

type InsertPasskeyUserParams struct {
	ID      []byte
	BcoName string
	Email   string
	Creds   []byte
}

func (q *Queries) InsertPasskeyUser(ctx context.Context, arg InsertPasskeyUserParams) (PasskeyUser, error) {
	row := q.db.QueryRow(ctx, insertPasskeyUser,
		arg.ID,
		arg.BcoName,
		arg.Email,
		arg.Creds,
	)
	var i PasskeyUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.BcoName,
		&i.Creds,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const markApprovedEmailUsed = `-- name: MarkApprovedEmailUsed :one
UPDATE approved_email
SET used    = true,
    used_at = NOW()
WHERE email = $1
RETURNING email, used, used_at, created, updated
`

func (q *Queries) MarkApprovedEmailUsed(ctx context.Context, email string) (ApprovedEmail, error) {
	row := q.db.QueryRow(ctx, markApprovedEmailUsed, email)
	var i ApprovedEmail
	err := row.Scan(
		&i.Email,
		&i.Used,
		&i.UsedAt,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const passkeyUserEmailExists = `-- name: PasskeyUserEmailExists :one
SELECT EXISTS(SELECT 1
              FROM passkey_user
              WHERE email = $1)
`

func (q *Queries) PasskeyUserEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, passkeyUserEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const passkeyUsernameExists = `-- name: PasskeyUsernameExists :one
SELECT EXISTS(SELECT 1
              FROM passkey_user
              WHERE bco_name = $1)
`

func (q *Queries) PasskeyUsernameExists(ctx context.Context, bcoName string) (bool, error) {
	row := q.db.QueryRow(ctx, passkeyUsernameExists, bcoName)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updatePasskeyUserCredentials = `-- name: UpdatePasskeyUserCredentials :one
UPDATE passkey_user
SET creds = $2
WHERE bco_name = $1
RETURNING id, email, bco_name, creds, created, updated
`

type UpdatePasskeyUserCredentialsParams struct {
	BcoName string
	Creds   []byte
}

func (q *Queries) UpdatePasskeyUserCredentials(ctx context.Context, arg UpdatePasskeyUserCredentialsParams) (PasskeyUser, error) {
	row := q.db.QueryRow(ctx, updatePasskeyUserCredentials, arg.BcoName, arg.Creds)
	var i PasskeyUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.BcoName,
		&i.Creds,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
