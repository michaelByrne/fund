// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

type IntervalUnit string

const (
	IntervalUnitWEEK  IntervalUnit = "WEEK"
	IntervalUnitMONTH IntervalUnit = "MONTH"
)

func (e *IntervalUnit) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IntervalUnit(s)
	case string:
		*e = IntervalUnit(s)
	default:
		return fmt.Errorf("unsupported scan type for IntervalUnit: %T", src)
	}
	return nil
}

type NullIntervalUnit struct {
	IntervalUnit IntervalUnit
	Valid        bool // Valid is true if IntervalUnit is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIntervalUnit) Scan(value interface{}) error {
	if value == nil {
		ns.IntervalUnit, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IntervalUnit.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIntervalUnit) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IntervalUnit), nil
}

type Donation struct {
	ID             int32
	DonorID        int32
	DonationPlanID int32
	Created        pgtype.Timestamp
	Updated        pgtype.Timestamp
}

type DonationPayment struct {
	ID              int32
	DonationID      int32
	PaypalPaymentID string
	AmountCents     int32
	Created         pgtype.Timestamp
	Updated         pgtype.Timestamp
}

type DonationPlan struct {
	ID            int32
	Name          string
	PaypalPlanID  pgtype.Text
	AmountCents   int32
	IntervalUnit  IntervalUnit
	IntervalCount int32
	Active        bool
	Created       pgtype.Timestamp
	Updated       pgtype.Timestamp
}

type Member struct {
	ID              int32
	FirstName       pgtype.Text
	LastName        pgtype.Text
	BcoName         pgtype.Text
	IpAddress       netip.Addr
	PaypalEmail     string
	PostalCode      pgtype.Text
	Created         pgtype.Timestamp
	Updated         pgtype.Timestamp
	ProviderPayerID pgtype.Text
}
