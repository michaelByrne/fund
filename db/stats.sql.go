// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: stats.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getFundStats = `-- name: GetFundStats :one
SELECT sum(amount_cents)            as total_donated,
       count(*)                     as total_donations,
       sum(amount_cents) / count(*) as average_donation,
       count(distinct donor_id)     as total_donors
FROM donation
         JOIN member m on donation.donor_id = m.id
         JOIN donation_payment dp on donation.id = dp.donation_id
WHERE fund_id = $1
`

type GetFundStatsRow struct {
	TotalDonated    int64
	TotalDonations  int64
	AverageDonation int32
	TotalDonors     int64
}

func (q *Queries) GetFundStats(ctx context.Context, fundID uuid.UUID) (GetFundStatsRow, error) {
	row := q.db.QueryRow(ctx, getFundStats, fundID)
	var i GetFundStatsRow
	err := row.Scan(
		&i.TotalDonated,
		&i.TotalDonations,
		&i.AverageDonation,
		&i.TotalDonors,
	)
	return i, err
}

const getMonthlyDonationTotalsForFund = `-- name: GetMonthlyDonationTotalsForFund :many
SELECT SUM(amount_cents)               AS total_donated,
       date_trunc('month', dp.created) AS month
FROM donation d
         JOIN donation_payment dp ON d.id = dp.donation_id
WHERE d.fund_id = $1
  AND d.recurring = true
GROUP BY date_trunc('month', dp.created)
ORDER BY month
`

type GetMonthlyDonationTotalsForFundRow struct {
	TotalDonated int64
	Month        pgtype.Interval
}

func (q *Queries) GetMonthlyDonationTotalsForFund(ctx context.Context, fundID uuid.UUID) ([]GetMonthlyDonationTotalsForFundRow, error) {
	rows, err := q.db.Query(ctx, getMonthlyDonationTotalsForFund, fundID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMonthlyDonationTotalsForFundRow
	for rows.Next() {
		var i GetMonthlyDonationTotalsForFundRow
		if err := rows.Scan(&i.TotalDonated, &i.Month); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
