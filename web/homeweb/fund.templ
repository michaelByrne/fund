package homeweb

import (
	"boardfund/service/donations"
	"boardfund/service/members"
	"boardfund/web/common"
	"fmt"
	"time"
)

func donationURL(freq donations.PayoutFrequency) string {
	if freq == donations.PayoutFrequencyMonthly {
		return "/donation/plan"
	}
	return "/donation/once"
}

templ Fund(fund donations.Fund, fundStats donations.FundStats, member *members.Member, path string) {
	@common.Layout(member, path) {
		<div id="donation-form" class="p-5 mt-2">
			<span class="blue-boxy-filter">
				@Title(fund.Name)
				<br/>
				@DonationForm(fund)
			</span>
			<hr class="border-odd "/>
			@Description(fund.Description)
			<hr class="border-odd "/>
			<div class="grid grid-cols-1 lg:grid-cols-3 gap-2">
				@FundStatus(fund, fundStats)
				if len(fundStats.Monthly) > 0 {
					<div class="col-span-2 my-2 blue-boxy-filter">
					    <div class="text-md font-semibold p-2 inline-block bg-high">month-by-month</div>
						<canvas class="bg-odd">
							@MonthlyTotalsChart(fundStats)
						</canvas>
					</div>
				}
			</div>
		</div>
	}
}

templ DonationForm(fund donations.Fund) {
	<form hx-post={ donationURL(fund.PayoutFrequency) } hx-target="#donation-form" class="bg-even p-4 flex flex-col max-w-md">
		<input type="hidden" name="fund" value={ fund.ID.String() }/>
		<div class="flex flex-wrap items-center gap-2 mb-6">
			<div class="flex items-center gap-2">
				<span>I would like to give</span>
				<div class="inline-flex items-center">
					<span>$</span>
					<input
						type="number"
						min="1"
						name="amount"
						id="amount"
						class="w-24 ml-1 text-sm border-slate-300 shadow-sm"
					/>
				</div>
			</div>
			@Frequency(fund.PayoutFrequency)
		</div>
		<button
			type="submit"
			class="self-center px-6 py-2 bg-button text-black hover:text-black hover:font-medium hover:shadow-blue-boxy-thin shadow-blue-boxy transition-all"
		>
			pay that shit
		</button>
	</form>
}

templ Frequency(freq donations.PayoutFrequency) {
	if freq == donations.PayoutFrequencyMonthly {
		<div class="flex items-center gap-2">
			<span>every</span>
			<span class="gap-0">
				<select
					name="interval"
					id="interval"
					class="text-sm border-slate-300 shadow-sm"
				>
					<option value="MONTH">month</option>
					<option value="WEEK">week</option>
				</select><span>.</span>
			</span>
		</div>
	} else {
		<div class="flex items-center">
			<span>once.</span>
		</div>
	}
}

templ Description(text string) {
	<div class="w-full my-2 filter blue-boxy-filter">
		<div class="text-md font-semibold p-2 mt-2 inline-block bg-high">about</div>
		<br/>
		<div class="font-medium italic p-2 mb-2 inline-block bg-odd">{ text }</div>
	</div>
}

templ Title(text string) {
	<h2 class="font-semibold bg-high inline-flex text-lg px-2 py-4">donate to&nbsp;<span class="underline underline-offset-4 decoration-[#333333]">{ text }</span></h2>
}

templ FundStatus(fund donations.Fund, fundStats donations.FundStats) {
	<div class="col-span-1 my-2 mr-4 blue-boxy-filter">
		<div class="text-md font-semibold p-2 inline-block bg-high">fund status</div>
		<ul class="list-none">
			@StatusItem(AmountOrInfinity(fund.GoalCents), "goal")
			@StatusItem(USD(fundStats.TotalDonated), "raised")
			@StatusItem(Date(&fund.Created), "start")
			@StatusItem(EndDate(fund.Expires), "end")
			@StatusItem(NextPayment(&fund.NextPayment), "next payment")
		</ul>
	</div>
}

templ USD(amountCents int32) {
	${ centsToDecimalString(amountCents) }
}

templ StatusItem(content templ.Component, title string) {
	<li class="p-2 odd:bg-odd even:bg-even flex sm:flex-row flex-col">
		<span class="font-semibold text-sm pr-2 text-gray-700">
			{ title }:
		</span>
		<span class="sm:ml-auto">
			@content
		</span>
	</li>
}

templ NextPayment(date *time.Time) {
	if date == nil {
		<span>&#8734;</span>
	} else if date.Before(time.Now()) {
		<span>paid</span>
	} else {
		<span>{ date.Format("01-02-2006") }</span>
	}
}

templ Donors(count int32) {
	<span>{ fmt.Sprintf("%d", count) }</span>
}

templ EndDate(date *time.Time) {
	if date == nil {
		<span>&#8734;</span>
	} else if date.Before(time.Now()) {
		<span class="text-red-700">{ date.Format("01-02-2006") }</span>
	} else {
		<span>{ date.Format("01-02-2006") }</span>
	}
}

templ Date(date *time.Time) {
	if date == nil {
		<span>&#8734;</span>
	} else {
		<span>{ date.Format("01-02-2006") }</span>
	}
}

templ AmountOrInfinity(amount int32) {
	if amount == 0 {
		<span class="text-green-700">$&#8734;</span>
	} else {
		<span class="text-green-700">${ centsToDecimalString(amount) }</span>
	}
}
