package homeweb

import (
	"boardfund/service/donations"
	"boardfund/service/members"
	"boardfund/web/common"
	"fmt"
	"strings"
	"time"
)

templ FundsTitle() {
	<h2 class="font-semibold text-lg p-2 inline-block underline underline-offset-4 mt-4 mx-4">current active funds</h2>
}

templ Funds(funds []donations.Fund, member *members.Member, path string) {
	@common.Layout(member, path) {
		<div id="funds">
			@FundsTitle()
			<div class="overflow-hidden w-[95%] ml-4 mb-5 mt-4">
				<div class="hidden lg:table max-h-[300px] w-[90%] overflow-y-auto">
					<table class="table-auto w-full border-collapse text-sm leading-relaxed">
						<thead>
							<tr>
								<th class="p-2 text-left font-semibold w-[22%]">name</th>
								<th class="p-2 text-left font-semibold w-[12%]">donors</th>
								<th class="p-2 text-left font-semibold w-[12%]">donated</th>
								<th class="p-2 text-left font-semibold w-[12%]">goal</th>
								<th class="p-2 text-left font-semibold w-[12%]">frequency</th>
								<th class="p-2 text-left font-semibold w-[15%]">expires</th>
							</tr>
						</thead>
						<tbody>
							for _, fund := range funds {
								<tr
									hx-get={ fmt.Sprintf("/donate/%s", fund.ID.String()) }
									class="clickable odd:bg-odd odd:hover:bg-odd-hover even:bg-even even:hover:bg-even-hover"
								>
									<td class="p-2">{ fund.Name }</td>
									<td class="p-2">{ fmt.Sprintf("%d", fund.Stats.TotalDonors) }</td>
									<td class="p-2">${ centsToDecimalString(fund.Stats.TotalDonated) }</td>
									@TableGoal(fund.GoalCents)
									<td class="p-2">{ string(fund.PayoutFrequency) }</td>
									@TableExpires(fund.Expires)
								</tr>
							}
						</tbody>
					</table>
				</div>
				<div class="block lg:hidden space-y-4 text-sm">
					for _, fund := range funds {
						<div
							hx-get={ fmt.Sprintf("/donate/%s", fund.ID.String()) }
							class="clickable mb-4 p-4 odd:bg-odd even:bg-even odd:hover:bg-odd-hover even:hover:bg-even-hover rounded-lg shadow-sm"
						>
							<p class="font-semibold text-lg mb-2">{ fund.Name }</p>
							<div>
								<p><span class="font-bold">donors:</span> { fmt.Sprintf("%d", fund.Stats.TotalDonors) }</p>
								<p><span class="font-bold">donated:</span> ${ centsToDecimalString(fund.Stats.TotalDonated) }</p>
								<p>
									<span class="font-bold">goal:</span> @TableGoal(fund.GoalCents)
								</p>
								<p><span class="font-bold">frequency:</span> { string(fund.PayoutFrequency) }</p>
								<p>
									<span class="font-bold">expires:</span> @TableExpires(fund.Expires)
								</p>
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	}
}

templ TableNextPayment(nextPayment time.Time) {
	if nextPayment.Before(time.Now()) {
		&nbsp;paid
	} else {
		&nbsp;{ nextPayment.Format("01-02-2006") }
	}
}

templ TableExpires(expires *time.Time) {
	if expires == nil {
		<td>&nbsp;&#8734;</td>
	} else {
		<td>&nbsp;{ expires.Format("01-02-2006") }</td>
	}
}

templ TableGoal(goal int32) {
	if goal == 0 {
		<td>&nbsp;&#8734;</td>
	} else {
		<td>&nbsp;${ centsToDecimalString(goal) }</td>
	}
}

templ About(member *members.Member, path string) {
	@common.Layout(member, path) {
		<div class="mx-auto mt-2 p-4 pb-6">
			@common.SectionTitle("about")
			<p class="mt-2">BCO Mutual Aid is a platform for community support in the form of bucks.</p>
		</div>
	}
}

func centsToDecimalString(cents int32) string {
	x := float64(cents) / 100

	s := fmt.Sprintf("%.2f", x)

	parts := strings.Split(s, ".")
	integerPart := parts[0]
	decimalPart := parts[1]

	n := len(integerPart)
	if n > 3 {
		var result strings.Builder
		for i, digit := range integerPart {
			if (n-i)%3 == 0 && i != 0 {
				result.WriteString(",")
			}
			result.WriteRune(digit)
		}
		integerPart = result.String()
	}

	return integerPart + "." + decimalPart
}
