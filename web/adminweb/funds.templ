package adminweb

import (
	"boardfund/service/donations"
	"boardfund/service/finance"
	"boardfund/service/members"
	"fmt"
	"github.com/google/uuid"
	"time"
)

templ Funds(funds []donations.Fund, member *members.Member, path string) {
	@Admin(member, path) {
		<div class="grid grid-cols-1 md:grid-cols-2 h-[90vh] overflow-hidden">
			<div>
				@AddFund()
			</div>
			<div class="overflow-auto">
				@FundsList(funds)
			</div>
		</div>
	}
}

templ AddFund() {
	<div class="w-full mx-auto max-w-md blue-boxy-filter">
		<h3 class="text-md font-semibold mt-2 inline-block bg-high p-2">new fund</h3>
		<form hx-post="/admin/fund" hx-swap="afterbegin" hx-target="#admin-funds" hx-target-error="this" class="w-[90%] p-4 bg-even">
			<div class="grid grid-cols-3 gap-4 mt-6">
				<label for="name" class="col-span-1 text-left">name</label>
				<input type="text" placeholder="human fund" required name="name" id="name" class="col-span-2 w-full pl-1 text-sm border border-slate-300 shadow-sm"/>
				<label for="description" class="col-span-1 text-left">description</label>
				<textarea name="description" placeholder="what's it for?" id="description" class="col-span-2 w-full pl-1 text-sm border border-slate-300 shadow-sm"></textarea>
				<label for="goal" class="col-span-1 text-left">goal</label>
				<div class="col-span-2 relative">
					<span class="absolute left-1 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
					<input
						type="number"
						name="goal"
						placeholder="optional"
						id="goal"
						min="0"
						class="w-full pl-6 text-sm border border-slate-300 shadow-sm"
					/>
				</div>
				<label for="frequency" class="col-span-1 text-left">frequency</label>
				<select name="frequency" id="frequency" class="col-span-2 w-full pl-1 text-sm border border-slate-300 shadow-sm">
					<option value="monthly">monthly</option>
					<option value="once">once</option>
				</select>
				<label for="date" class="col-span-1 text-left">end date</label>
				<input type="date" name="date" id="date" class="col-span-2 w-full pl-1 text-sm border border-slate-300 shadow-sm"/>
			</div>
			<div class="mt-6 flex justify-center">
				<button
					type="submit"
					class="px-4 py-2 text-center text-md bg-button text-black hover:text-black hover:font-medium hover:shadow-blue-boxy-thin shadow-blue-boxy"
				>
					submit
				</button>
			</div>
		</form>
	</div>
}

templ FundsList(funds []donations.Fund) {
	<div id="funds-list" class="w-full mx-auto max-w-md h-full blue-boxy-filter">
		<h3 class="text-md font-semibold mt-2 bg-high inline-block p-2">current funds</h3>
		<ul id="admin-funds" class="max-w-[90%] max-h-[300px]">
			for _, fund := range funds {
				@FundRow(fund)
			}
		</ul>
	</div>
}

templ FundRow(fund donations.Fund) {
	<li
		class="clickable fund-row p-2 flex flex-col md:flex-row md:items-center gap-2 odd:bg-odd even:bg-even odd:hover:bg-odd-hover even:hover:bg-even-hover relative"
		hx-get={ fmt.Sprintf("/donate/%s", fund.ID.String()) }
	>
		<div class="flex items-center w-full">
			<div class="flex flex-col w-full md:flex-row md:items-center">
				<span class="font-medium">{ fund.Name }</span>
				<span class="text-sm text-gray-600 md:ml-auto">{ string(fund.PayoutFrequency) }</span>
			</div>
			<div class="relative" onclick="event.stopPropagation()">
				<span
					title="audit"
					class="ml-4 text-xl text-strong hover:text-links cursor-pointer gear-icon"
					data-fund-id={ fund.ID.String() }
					onclick="toggleDropdown(event, this)"
					hx-get={ fmt.Sprintf("/admin/fund/audits/%s", fund.ID.String()) }
					hx-target="next .audit-content"
					hx-trigger="audit-load"
				>
					&#128269;
				</span>
				<div class="audit-dropdown hidden absolute right-0 top-[calc(100%+8px)] mt-1 bg-even border border-gray-200 shadow-lg z-50 min-w-[200px] max-h-[300px] overflow-y-auto">
					<div class="absolute -top-2 right-4 w-4 h-4 bg-white border-t border-l border-gray-200 transform rotate-45"></div>
					<div class="relative bg-white z-10">
						<ul class="audit-content">
							<li class="p-2">Loading...</li>
						</ul>
					</div>
				</div>
			</div>
			<div
				hx-post={ fmt.Sprintf("/admin/fund/deactivate/%s", fund.ID.String()) }
				hx-confirm={ fmt.Sprintf("deactivate %s?", fund.Name) }
				hx-trigger="click consume"
				hx-swap="outerHTML"
				class="text-title/90 hover:text-red-500 text-lg font-bold ml-4"
			>
				&#215;
			</div>
		</div>
		<script type="application/javascript">
            me().on("fundDeactivated", (ev) => {
                ev.srcElement.closest('.fund-row').fadeOut(null, 400);
            });
        </script>
	</li>
}

templ FundAudits(availableReports []finance.ReportInfo) {
	<div class="p-2 font-medium">available audits</div>
	<ul class="p-2">
		for _ , report := range availableReports {
			<li>
				<span>{ report.Date.Format("01-02-2006") }</span>:&nbsp;<span hx-get={ makeAuditURL(report.FundID, report.Date, report.Type) } class="hover:underline text-blue-400">{ report.Type }</span>
			</li>
		}
	</ul>
}

templ FundPaymentsAudit(audit finance.Audit, member *members.Member, path string) {
	@Admin(member, path) {
		<div id="payments-list" class="blue-boxy-filter p-2">
			<h3 class="text-md font-semibold bg-high inline-block p-2">payments <span class="font-medium">audit for</span> { audit.FundName } <span class="font-medium">run</span> { audit.Date.Format("01-02-2006") }</h3>
			<div class="hidden md:block">
				<div class="max-h-[300px] overflow-auto">
					<table class="w-full text-xs text-left border-collapse leading-relaxed">
						<thead class="sticky top-0 z-10 bg-even">
							<tr>
								<th class="text-left w-[2%]">
									<span class="inline-block p-2"></span>
								</th>
								<th class="text-left w-[15%]">
									<span class="inline-block p-2">date</span>
								</th>
								<th class="text-left w-[15%] hide-on-small">
									<span class="inline-block p-2">paypal date</span>
								</th>
								<th class="text-left w-[18%] hide-on-small">
									<span class="inline-block p-2">paypal id</span>
								</th>
								<th class="text-left w-[10%]">
									<span class="inline-block p-2">amount</span>
								</th>
								<th class="text-left w-[15%]">
									<span class="inline-block p-2">paypal amount</span>
								</th>
								<th class="text-left w-[20%]">
									<span class="inline-block p-2">paypal status</span>
								</th>
							</tr>
						</thead>
						<tbody>
							for _, payment := range audit.Payments {
								<tr class="even:bg-even odd:bg-odd">
									@WarningCell(payment)
									<td class="pl-2">{ payment.Created.Format("01-02-2006") }</td>
									<td class="hide-on-small">{ transactionDate(payment.ProviderCreated) }</td>
									<td class="font-mono hide-on-small">{ transactionID(payment.ProviderPaymentID) }</td>
									<td>${ centsToDecimalString(payment.AmountCents) }</td>
									<td>{ transactionAmount(payment.TransactionAmountCents) }</td>
									<td>{ transactionStatus(payment.TransactionStatus) }</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
			<div class="md:hidden">
				<div class="space-y-4">
					for _, payment := range audit.Payments {
						<div class="bg-white p-4">
							<div class="flex items-center justify-between mb-2">
								<div class="flex items-center space-x-2">
									@WarningCell(payment)
									<span class="text-sm font-medium">{ payment.Created.Format("01-02-2006") }</span>
								</div>
								<span class="text-sm font-bold">${ centsToDecimalString(payment.AmountCents) }</span>
							</div>
							<div class="space-y-2 text-xs">
								<div class="flex justify-between">
									<span class="text-gray-500">PayPal Date:</span>
									<span>{ transactionDate(payment.ProviderCreated) }</span>
								</div>
								<div class="flex justify-between">
									<span class="text-gray-500">PayPal ID:</span>
									<span class="font-mono">{ transactionID(payment.ProviderPaymentID) }</span>
								</div>
								<div class="flex justify-between">
									<span class="text-gray-500">PayPal Amount:</span>
									<span>{ transactionAmount(payment.TransactionAmountCents) }</span>
								</div>
								<div class="flex justify-between">
									<span class="text-gray-500">Status:</span>
									<span>{ transactionStatus(payment.TransactionStatus) }</span>
								</div>
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	}
}

templ WarningCell(payment finance.AuditPayment) {
	if payment.TransactionAmountCents != payment.AmountCents || payment.TransactionStatus != "COMPLETED" {
		<td class="px-1 justify-center bg-red-300 flex items-center">!</td>
	} else {
		<td class="px-1 justify-center bg-green-200 flex items-center">&check;</td>
	}
}

func transactionDate(date time.Time) string {
	if date.IsZero() {
		return "?"
	}
	return date.Format("01-02-2006")
}

func transactionID(transactionID string) string {
	if transactionID == "" {
		return "?"
	}
	return transactionID
}

func transactionAmount(amount int32) string {
	if amount == 0 {
		return "?"
	}

	return "$" + centsToDecimalString(amount)
}

func transactionStatus(status string) string {
	if status == "" {
		return "?"
	}
	return status
}

func convertToLastDayOfMonth(dateString string) string {
	parsedTime, err := time.Parse("2006-01", dateString)
	if err != nil {
		return "date error"
	}

	lastDay := parsedTime.AddDate(0, 1, 0).AddDate(0, 0, -1)

	formattedDate := lastDay.Format("01-02-2006")

	return formattedDate
}

func makeAuditURL(fundID uuid.UUID, date time.Time, auditType string) string {
	urlOut := "/admin/fund/audit"
	urlOut += "?fund=" + fundID.String()
	urlOut += "&date=" + date.Format("01-02-2006")
	urlOut += "&type=" + auditType

	return urlOut
}
