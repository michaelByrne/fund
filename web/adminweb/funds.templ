package adminweb

import (
	"boardfund/service/donations"
	"boardfund/service/members"
	"fmt"
	"time"
)

templ Funds(funds []donations.Fund, member *members.Member, path string) {
	@Admin(member, path) {
		<div class="grid grid-cols-1 md:grid-cols-2 h-[90vh] overflow-hidden">
			<div>
				@AddFund()
			</div>
			<div class="overflow-auto">
				@FundsList(funds)
			</div>
		</div>
		<div id="global-dropdown-container" class="absolute top-0 left-0 w-full h-full pointer-events-none">
			<script type="application/javascript">
                me('.gear-icon').on('showMenu', function (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    console.log(e.target.closest('.fund-row'))

                    const dropdown = e.target.closest('.fund-row').querySelector('.audit-dropdown');

                    const container = document.getElementById('global-dropdown-container');

                    // Move dropdown to the container
                    container.innerHTML = ''; // Clear existing dropdowns
                    container.appendChild(dropdown);

                    dropdown.classList.toggle('hidden');
                    const rect = e.target.getBoundingClientRect();
                    dropdown.style.position = 'absolute';
                    dropdown.style.top = `${rect.bottom + window.scrollY}px`;
                    dropdown.style.left = `${rect.left + window.scrollX}px`;
                    dropdown.style.pointerEvents = 'auto';

                    if (!dropdown.classList.contains('hidden')) {
                        document.addEventListener('click', function closeDropdown(event) {
                            if (!dropdown.contains(event.target) && !event.target.matches('.gear-icon')) {
                                dropdown.classList.add('hidden');
                                document.removeEventListener('click', closeDropdown);
                            }
                    });
                }

                    return false;
                });
            </script>
		</div>
	}
}

templ AddFund() {
	<div class="w-full mx-auto max-w-md blue-boxy-filter">
		<h3 class="text-md font-semibold mt-2 inline-block bg-high p-2">new fund</h3>
		<form hx-post="/admin/fund" hx-swap="afterbegin" hx-target="#admin-funds" hx-target-error="this" class="w-[90%] p-4 bg-even">
			<div class="grid grid-cols-3 gap-4 mt-6">
				<label for="name" class="col-span-1 text-left">name</label>
				<input type="text" placeholder="human fund" required name="name" id="name" class="col-span-2 w-full pl-1 text-sm border border-slate-300 shadow-sm"/>
				<label for="description" class="col-span-1 text-left">description</label>
				<textarea name="description" placeholder="what's it for?" id="description" class="col-span-2 w-full pl-1 text-sm border border-slate-300 shadow-sm"></textarea>
				<label for="goal" class="col-span-1 text-left">goal</label>
				<div class="col-span-2 relative">
					<span class="absolute left-1 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
					<input
						type="number"
						name="goal"
						placeholder="optional"
						id="goal"
						min="0"
						class="w-full pl-6 text-sm border border-slate-300 shadow-sm"
					/>
				</div>
				<label for="frequency" class="col-span-1 text-left">frequency</label>
				<select name="frequency" id="frequency" class="col-span-2 w-full pl-1 text-sm border border-slate-300 shadow-sm">
					<option value="monthly">monthly</option>
					<option value="once">once</option>
				</select>
				<label for="date" class="col-span-1 text-left">end date</label>
				<input type="date" name="date" id="date" class="col-span-2 w-full pl-1 text-sm border border-slate-300 shadow-sm"/>
			</div>
			<div class="mt-6 flex justify-center">
				<button
					type="submit"
					class="px-4 py-2 text-center text-md bg-button text-black hover:text-black hover:font-medium hover:shadow-blue-boxy-thin shadow-blue-boxy"
				>
					submit
				</button>
			</div>
		</form>
	</div>
}

templ FundsList(funds []donations.Fund) {
	<div id="funds-list" class="w-full mx-auto max-w-md h-full blue-boxy-filter">
		<h3 class="text-md font-semibold mt-2 bg-high inline-block p-2">current funds</h3>
		<ul id="admin-funds" class="max-w-[90%] max-h-[300px]">
			for _, fund := range funds {
				@FundRow(fund)
			}
		</ul>
	</div>
}

templ FundRow(fund donations.Fund) {
	<li
		class="clickable fund-row p-2 flex flex-col md:flex-row md:items-center gap-2 odd:bg-odd even:bg-even odd:hover:bg-odd-hover even:hover:bg-even-hover relative"
		hx-get={ fmt.Sprintf("/donate/%s", fund.ID.String()) }
	>
		<div class="flex items-center w-full">
			<div class="flex flex-col w-full md:flex-row md:items-center">
				<span class="font-medium">{ fund.Name }</span>
				<span class="text-sm text-gray-600 md:ml-auto">{ string(fund.PayoutFrequency) }</span>
			</div>
			<div class="relative" onclick="event.stopPropagation()">
				<span
					title="audit"
					class="ml-4 text-xl text-strong hover:text-links cursor-pointer gear-icon"
					data-fund-id={ fund.ID.String() }
					onclick="toggleDropdown(event, this)"
					hx-get={ fmt.Sprintf("/admin/fund/audit/%s", fund.ID.String()) }
					hx-target="next .audit-content"
					hx-trigger="audit-load"
				>
					&#128269;
				</span>
				<div class="audit-dropdown hidden absolute right-0 top-[calc(100%+8px)] mt-1 bg-even border border-gray-200 shadow-lg z-50 min-w-[200px] max-h-[300px] overflow-y-auto">
					<div class="absolute -top-2 right-4 w-4 h-4 bg-white border-t border-l border-gray-200 transform rotate-45"></div>
					<div class="relative bg-white z-10">
						<ul class="audit-content">
							<li class="p-2">Loading...</li>
						</ul>
					</div>
				</div>
			</div>
			<div
				hx-post={ fmt.Sprintf("/admin/fund/deactivate/%s", fund.ID.String()) }
				hx-confirm={ fmt.Sprintf("deactivate %s?", fund.Name) }
				hx-trigger="click consume"
				hx-swap="outerHTML"
				class="text-title/90 hover:text-red-500 text-lg font-bold ml-4"
			>
				&#215;
			</div>
		</div>
	</li>
}

templ FundAudit(availableReports []time.Time) {
	<div>
		for _ , report := range availableReports {
			<li class="clickable hover:underline p-2">
				{ report.Format("01-02-2006") }
			</li>
		}
	</div>
}

templ FundAuditResult(dateStr string) {
	<div class="w-[90%]">
		<h3 class="text-base font-semibold mb-5 mt-2 pl-2">audit results for period ending: <div class="underline">{ dateStr }</div></h3>
		<div class="text-sm my-2 w-[60%]">
			<div class="flex flex-row items-center my-2">
				<h4 class="font-semibold p-2">fund:</h4>
				<span class="ml-auto p-2">the human fund</span>
			</div>
			<div class="flex flex-row items-center my-2">
				<h4 class="font-semibold p-2">db payments:</h4>
				<span class="ml-auto p-2">$666</span>
			</div>
			<div class="flex flex-row items-center my-2">
				<h4 class="font-semibold p-2">provider payments:</h4>
				<span class="ml-auto p-2">$666</span>
			</div>
			<div class="flex flex-row items-center my-2">
				<h4 class="font-semibold p-2">paypal fees:</h4>
				<span class="ml-auto p-2">$50</span>
			</div>
			<div class="flex flex-row items-center my-2">
				<h4 class="font-semibold p-2">expected payouts:</h4>
				<span class="ml-auto p-2">$616</span>
			</div>
		</div>
	</div>
}

func convertToLastDayOfMonth(dateString string) string {
	parsedTime, err := time.Parse("2006-01", dateString)
	if err != nil {
		return "date error"
	}

	lastDay := parsedTime.AddDate(0, 1, 0).AddDate(0, 0, -1)

	formattedDate := lastDay.Format("01-02-2006")

	return formattedDate
}
