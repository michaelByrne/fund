package adminweb

import (
	"boardfund/service/donations"
	"boardfund/service/members"
	"fmt"
	"strings"
)

templ Members(members []members.Member, member *members.Member, path string) {
	@Admin(member, path) {
		<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
			@AddMember()
			@MembersList(members)
		</div>
	}
}

templ MembersList(members []members.Member) {
	<div id="members-list">
		<h3 class="text-md font-semibold mt-2 mb-5 p-2 inline-block bg-[#c9e4c3]">current members</h3>
		<ul id="admin-members" class="max-w-[90%] overflow-y-auto">
			for _, member := range members {
				@MemberRow(member)
			}
		</ul>
	</div>
}

templ MemberRow(member members.Member) {
	<li
		class="clickable member-row p-2 flex flex-col md:flex-row md:items-center gap-2 odd:bg-[#acccdb] odd:hover:bg-[#dbbbac] even:hover:bg-[#e4cdc3]"
		hx-get={ fmt.Sprintf("/admin/member/%s", member.ID.String()) }
	>
		<div class="flex items-center w-full">
			<!-- Name and email container -->
			<div class="flex flex-col w-full md:flex-row md:items-center">
				<span class="font-medium">{ member.BCOName }</span>
				<span class="text-sm text-gray-600 md:ml-auto">{ member.Email }</span>
			</div>
			<!-- Button -->
			<button
				hx-post={ fmt.Sprintf("/admin/member/deactivate/%s", member.ID.String()) }
				hx-confirm={ fmt.Sprintf("deactivate %s?", member.BCOName) }
				hx-trigger="click consume"
				hx-swap="outerHTML"
				class="text-gray-400 hover:text-red-500 font-bold ml-4"
			>
				✖️
			</button>
		</div>
		<script type="application/javascript">
    		me().on("memberDeactivated", (ev) => {
    			me(".member-row").fadeOut(null, 400);
    		});
    	</script>
	</li>
}

templ AddMember() {
	<div class="w-full mx-auto max-w-md">
		<h3 class="text-md font-semibold mt-2 mb-4 inline-block bg-[#c9e4c3] p-2">new member</h3>
		<form hx-post="/admin/member" hx-swap="afterbegin" hx-target="#admin-members" id="new-member" class="w-[85%] py-4 bg-[#acccdb]">
			<div class="grid grid-cols-3 gap-4 mt-6">
				<label for="first" class="col-span-1 text-right">first name</label>
				<input type="text" required name="first" id="first" placeholder="first" class="col-span-2 w-48 pl-1 text-sm border border-slate-300 shadow-sm"/>
				<label for="last" class="col-span-1 text-right">last name</label>
				<input type="text" required name="last" id="last" placeholder="last" class="col-span-2 w-48 pl-1 text-sm border border-slate-300 shadow-sm"/>
				<label for="email" class="col-span-1 text-right">email</label>
				<input type="email" required name="email" placeholder="email" id="email" class="col-span-2 w-48 pl-1 text-sm border border-slate-300 shadow-sm"/>
				<label for="username" class="col-span-1 text-right">username</label>
				<input type="text" required name="username" placeholder="hotdoghorny" id="username" class="col-span-2 w-48 pl-1 text-sm border border-slate-300 shadow-sm"/>
			</div>
			<div class="mt-6 flex justify-center">
				<button
					type="submit"
					class="px-4 py-2 text-center text-md bg-stone-100 text-black hover:text-black hover:bg-[#e4cdc3] hover:font-medium hover:shadow-md"
				>
					submit
				</button>
			</div>
		</form>
	</div>
}

templ Member(viewedMember members.Member, member *members.Member, path string) {
	@Admin(member, path) {
		<div id="admin-member" class="w-full">
			<h3 class="text-base font-semibold mb-4 mt-2 pl-2">member: <span class="underline">{ viewedMember.BCOName }</span></h3>
			<div class="text-sm my-2 w-[60%]">
				<div class="flex flex-row items-center my-2">
					<h4 class="font-semibold bg-[#c9e4c3] p-2">name:</h4>
					<span class="ml-auto p-2 bg-[#c9e4c3]">{ viewedMember.FirstName } { viewedMember.LastName }</span>
				</div>
				<div class="flex flex-row items-center my-2">
					<h4 class="font-semibold bg-[#c9e4c3] p-2">member since:</h4>
					<span class="ml-auto p-2 bg-[#c9e4c3]">{ viewedMember.Created.Format("01-02-2006") }</span>
				</div>
				<div class="flex flex-row items-center my-2">
					<h4 class="font-semibold bg-[#c9e4c3] p-2">email:</h4>
					<span class="ml-auto p-2 bg-[#c9e4c3]">{ viewedMember.Email }</span>
				</div>
				<div class="flex flex-row items-center my-2">
					<h4 class="font-semibold bg-[#c9e4c3] p-2">total contributions:</h4>
					<span class="ml-auto bg-[#c9e4c3] p-2">{ centsToDollarString(viewedMember.GetTotalDonatedCents()) }</span>
				</div>
			</div>
			<hr class="border-[#acccdb]"/>
			<div class="my-4 w-[80%]">
				<button
					id="toggle-donations"
					class="hover:text-grey-600 hover:bg-[#e4cdc3] font-semibold p-2"
				>
					<span class="underline">donations</span><span class="text-lg pl-1">&#8594;</span>
					<script>
            		    me().on("click", () => {
                            const donationsList = me("#donations-list");
                            if (donationsList.classList.contains("hidden")) {
                                donationsList.classList.remove("hidden");
                                me("#toggle-donations").innerHTML = "<span class='underline'>donations</span><span class='text-lg pl-1'>&#8595;</span>";
                            } else {
                                donationsList.classList.add("hidden");
                                me("#toggle-donations").innerHTML = "<span class='underline'>donations</span><span class='text-lg pl-1'>&#8594;</span>";
                            }
                        });
            		</script>
				</button>
				<div id="donations-list" class="mt-2 pt-2 hidden">
					@DonationsList(viewedMember.Donations)
				</div>
			</div>
		</div>
	}
}

templ DonationsList(donations []donations.Donation) {
	<div class="sm:block">
		<table class="w-full text-sm text-left border-collapse">
			<thead>
				<tr class="font-semibold">
					<th class="py-2 text-left">created</th>
					<th class="py-2 text-center">fund</th>
					<th class="py-2 text-center">last payment</th>
					<th class="py-2 text-center">total contributed</th>
					<th class="py-2 text-right">plan</th>
				</tr>
			</thead>
			<tbody>
				for _, donation := range donations {
					<tr class="odd:bg-[#acccdb] text-left">
						<td class="py-2">{ donation.Created.Format("01-02-2006") }</td>
						<td class="py-2 text-center">{ donation.FundName }</td>
						@LastPayment(donation.LastPayment())
						<td class="py-2 text-center">{ centsToDollarString(donation.TotalDonatedCents()) }</td>
						@DonationPlan(donation.Plan)
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ DonationPlan(plan *donations.DonationPlan) {
	if plan != nil {
		<td class="py-2 text-right" data-label="plan">{ fmt.Sprintf("%s / %s", centsToDollarString(plan.AmountCents), strings.ToLower(string(plan.IntervalUnit))) }</td>
	} else {
		<td class="py-2 pr-4 text-right" data-label="plan">-</td>
	}
}

templ LastPayment(payment *donations.DonationPayment) {
	if payment != nil {
		<td class="py-2 text-center" data-label="last payment">{ payment.Created.Format("01-02-2006") }</td>
	} else {
		<td class="py-2 pr-4 text-center" data-label="last payment">-</td>
	}
}
