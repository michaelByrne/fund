package adminweb

import (
	"boardfund/service/auth"
	"boardfund/service/donations"
	"boardfund/service/members"
	"boardfund/web/common"
	"fmt"
	"strings"
)

templ Members(members []members.Member, emails []auth.ApprovedEmail, member *members.Member, path string) {
	@Admin(member, path) {
		<div class="grid grid-cols-1 gap-2 lg:grid-cols-2 h-full">
			<div class="approved-emails flex flex-col h-full p-2 overflow-hidden w-[95%]">
				@ApprovedEmails(emails)
			</div>
			<div class="flex flex-col h-full p-2 overflow-hidden w-[95%]">
				@MembersList(members)
			</div>
		</div>
	}
}

templ MembersList(members []members.Member) {
	@common.Section("current members") {
		<div class="flex-grow overflow-y-auto max-h-[300px] sm:max-h-[500px]">
			<ul id="admin-members">
				for _, member := range members {
					@MemberRow(member)
				}
			</ul>
		</div>
	}
}

templ ApprovedEmails(emails []auth.ApprovedEmail) {
	@common.Section("approved emails") {
		<div class="flex-grow overflow-y-auto max-h-[300px] sm:max-h-[500px]">
			@AddEmail()
			@EmailList(emails)
		</div>
	}
}

templ AddEmail() {
	<form
		hx-post="/admin/approved"
		hx-target="closest .approved-emails"
		class="flex gap-2"
	>
		<input
			type="email"
			name="email"
			placeholder="Add new email..."
			required
			class="flex-1 border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
		/>
		<button
			type="submit"
			class="h-10 w-10 flex items-center justify-center bg-white border border-odd hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
		>
			<span class="text-gray-600 leading-none translate-y-[-1px]">+</span>
		</button>
	</form>
}

templ EmailList(emails []auth.ApprovedEmail) {
	<div id="email-list">
		for _, email := range emails {
			@ApprovedEmail(email)
		}
	</div>
}

templ ApprovedEmail(email auth.ApprovedEmail) {
	<div class="approved-email flex items-center justify-between py-2 border-b last:border-0 even:bg-even odd:bg-odd">
		<div class="flex flex-col">
			<span
				class={
					"text-sm font-medium",
					templ.KV("line-through text-gray-400", email.Used),
				}
			>
				{ email.Email }
			</span>
			<span class="text-xs text-gray-500">
				if email.Used {
					Used { email.UsedAt.Format("Jan 02, 2006") }
				} else {
					Added { email.Created.Format("Jan 02, 2006") }
				}
			</span>
		</div>
		if !email.Used {
			<button
				hx-delete={ "/admin/approved/" + email.Email }
				hx-target="#email-list"
				hx-swap="outerHTML"
				class="h-8 w-8 p-0 text-gray-500 hover:text-red-500"
			>
				&#215;
			</button>
		}
	</div>
}

templ MemberRow(member members.Member) {
	<li
		class="clickable member-row p-2 flex flex-col md:flex-row md:items-center even:bg-even odd:bg-odd odd:hover:bg-odd-hover even:hover:bg-even-hover"
		hx-get={ fmt.Sprintf("/admin/member/%s", member.ID.String()) }
	>
		<div class="flex items-center w-full">
			<div class="flex flex-col w-full md:flex-row md:items-center">
				<span class="font-medium">{ member.BCOName }</span>
				<span class="text-sm text-gray-600 md:ml-auto">{ member.Email }</span>
			</div>
			<div
				hx-post={ fmt.Sprintf("/admin/member/deactivate/%s", member.ID.String()) }
				hx-confirm={ fmt.Sprintf("deactivate %s?", member.BCOName) }
				hx-trigger="click consume"
				hx-swap="outerHTML"
				class="flex items-center justify-center h-8 w-8 text-gray-500 hover:text-red-500"
			>
				&#215;
			</div>
		</div>
		<script type="application/javascript">
            me().on("memberDeactivated", (ev) => {
                ev.srcElement.closest(".member-row").fadeOut(null, 400);
            });
        </script>
	</li>
}

templ Member(viewedMember members.Member, member *members.Member, path string) {
	@Admin(member, path) {
		<div id="admin-member" class="w-[95%] mx-auto h-full mt-4 blue-boxy-filter">
			<h3 class="text-base font-semibold bg-high inline-flex p-2">member: { viewedMember.BCOName }</h3>
			<div class="text-sm mb-2 md:w-[55%] w-[90%] bg-even">
				<div class="flex flex-row items-center mb-2">
					<h4 class="font-semibold p-2">member since:</h4>
					<span class="ml-auto p-2">{ viewedMember.Created.Format("01-02-2006") }</span>
				</div>
				<div class="flex flex-row items-center bg-odd my-2">
					<h4 class="font-semibold p-2">email:</h4>
					<span class="ml-auto p-2">{ viewedMember.Email }</span>
				</div>
				<div class="flex flex-row items-center my-2">
					<h4 class="font-semibold p-2">total contributions:</h4>
					<span class="ml-auto p-2">${ centsToDecimalString(viewedMember.GetTotalDonatedCents()) }</span>
				</div>
				<div class="flex flex-row items-center my-2">
					<h4 class="font-semibold p-2">roles:</h4>
					<span class="ml-auto p-2">{ rolesToCommaString(viewedMember.Roles) }</span>
				</div>
			</div>
		</div>
		<div class="my-4 w-[95%] mx-auto blue-boxy-filter">
			<h4 class="font-semibold inline-block bg-high p-2">donations</h4>
			@DonationsList(viewedMember.Donations)
		</div>
	}
}

templ DonationsList(donations []donations.Donation) {
	<div id="donations-list">
		<div class="hidden md:block">
			<div class="max-h-[300px] overflow-auto">
				<table class="w-full text-sm text-left border-collapse leading-relaxed">
					<thead class="sticky top-0 z-10 bg-even">
						<tr class="font-semibold">
							<th class="text-left pb-1 w-1/5">
								<span class="inline-block p-2">date</span>
							</th>
							<th class="text-center pb-1 w-1/5">
								<span class="inline-block p-2">fund</span>
							</th>
							<th class="text-center pb-1 w-1/5">
								<span class="inline-block p-2">last payment</span>
							</th>
							<th class="text-center pb-1 w-1/5">
								<span class="inline-block p-2">total donated</span>
							</th>
							<th class="text-center pb-1 w-1/5">
								<span class="inline-block p-2">plan</span>
							</th>
						</tr>
					</thead>
					<tbody>
						for _, donation := range donations {
							<tr class="odd:bg-odd even:bg-even text-left">
								<td class="py-2 pl-2">{ donation.Created.Format("01-02-2006") }</td>
								<td class="py-2 text-center">{ donation.FundName }</td>
								@LastPayment(donation.LastPayment())
								<td class="py-2 text-center">${ centsToDecimalString(donation.TotalDonatedCents()) }</td>
								@DonationPlan(donation.Plan)
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
		<div class="block md:hidden space-y-4">
			for _, donation := range donations {
				<div class="p-4 border shadow-blue-boxy even:bg-even odd:bg-odd">
					<div class="flex justify-between mb-2">
						<span class="font-bold">date:</span>
						<span>{ donation.Created.Format("01-02-2006") }</span>
					</div>
					<div class="flex justify-between mb-2">
						<span class="font-bold">fund:</span>
						<span>{ donation.FundName }</span>
					</div>
					<div class="flex justify-between mb-2">
						<span class="font-bold">last payment:</span>
						@LastPayment(donation.LastPayment())
					</div>
					<div class="flex justify-between mb-2">
						<span class="font-bold">total donated:</span>
						<span>${ centsToDecimalString(donation.TotalDonatedCents()) }</span>
					</div>
					<div class="flex justify-between">
						<span class="font-bold">plan:</span>
						@DonationPlan(donation.Plan)
					</div>
				</div>
			}
		</div>
	</div>
}

templ DonationPlan(plan *donations.DonationPlan) {
	if plan != nil {
		<td class="py-2 text-center">{ fmt.Sprintf("$%s / %s", centsToDecimalString(plan.AmountCents), strings.ToLower(string(plan.IntervalUnit))) }</td>
	} else {
		<td class="py-2 text-center">-</td>
	}
}

templ LastPayment(payment *donations.DonationPayment) {
	if payment != nil {
		<td class="py-2 text-center">{ payment.Created.Format("01-02-2006") }</td>
	} else {
		<td class="py-2 text-center">-</td>
	}
}

func rolesToCommaString(roles []members.MemberRole) string {
	var roleStrings []string
	for _, role := range roles {
		roleStrings = append(roleStrings, strings.ToLower(string(role)))
	}

	return strings.Join(roleStrings, ", ")
}
